{"version":3,"sources":["api/user/user.model.js"],"names":["Promise","require","authTypes","UserSchema","name","String","address","fname","email","type","lowercase","role","default","newsletter","telephone","id","password","provider","salt","resetPasswordToken","resetPasswordExpires","facebook","twitter","google","github","contacts","paid_status","paid_plan","services","mobile","company","created_at","Date","active","Boolean","virtual","get","_id","path","validate","indexOf","length","value","respond","self","constructor","findOne","exec","then","user","catch","err","validatePresenceOf","pre","next","isModified","Error","makeSalt","saltErr","encryptPassword","encryptErr","hashedPassword","methods","authenticate","callback","pwdGen","byteSize","defaultByteSize","arguments","randomBytes","toString","defaultIterations","defaultKeyLength","Buffer","pbkdf2Sync","pbkdf2","key","model"],"mappings":"AAAA;;;;;;AAEA;;;;AACA;;;;;;AACA,mBAASA,OAAT,GAAmBC,QAAQ,UAAR,CAAnB;;;AAGA,IAAMC,YAAY,CAAC,QAAD,EAAW,SAAX,EAAsB,UAAtB,EAAkC,QAAlC,CAAlB;;AAEA,IAAIC,aAAa,qBAAW;AAC1BC,QAAMC,MADoB;AAE1BC,WAAS,EAFiB;AAG1BC,SAAOF,MAHmB;AAI1BG,SACA;AACEC,UAAMJ,MADR;AAEEK,eAAW;AAFb,GAL0B;AAS1BC,QAAM;AACJF,UAAMJ,MADF;AAEJO,aAAS;AAFL,GAToB;AAa1BC,cAAYR,MAbc;AAc1BS,aAAWT,MAde;AAe1BU,MAAGV,MAfuB;AAgB1BW,YAAUX,MAhBgB;AAiB1BY,YAAUZ,MAjBgB;AAkB1Ba,QAAMb,MAlBoB;AAmB1Bc,sBAAoBd,MAnBM;AAoB1Be,wBAAsBf,MApBI;AAqB1BgB,YAAU,EArBgB;AAsB1BC,WAAS,EAtBiB;AAuB1BC,UAAQ,EAvBkB;AAwB1BC,UAAQ,EAxBkB;AAyB1BC,YAAU,EAzBgB;AA0B1BC,eAAarB,MA1Ba;AA2B1BsB,aAAYtB,MA3Bc;AA4B1BuB,YAAU,EA5BgB;AA6B1BC,UAASxB,MA7BiB;AA8B1ByB,WAASzB,MA9BiB;AA+B1B0B,cAAgB,EAAEtB,MAAMuB,IAAR,EA/BU;AAgC1BC,UAAQ,EAAExB,MAAMyB,OAAR,EAAiBtB,SAAS,IAA1B;AAhCkB,CAAX,CAAjB;;AAmCA;;;;AAIA;AACAT,WACGgC,OADH,CACW,SADX,EAEGC,GAFH,CAEO,YAAW;AACd,SAAO;AACL,YAAQ,KAAKhC,IADR;AAEL,YAAQ,KAAKO,IAFR;AAGL,UAAK,KAAKI,EAHL;AAIL,aAAQ,KAAKR,KAJR;AAKL,cAAS,KAAKsB,MALT;AAML,aAAQ,KAAKrB;AANR,GAAP;AAQD,CAXH;;AAaA;AACAL,WACGgC,OADH,CACW,OADX,EAEGC,GAFH,CAEO,YAAW;AACd,SAAO;AACL,WAAO,KAAKC,GADP;AAEL,YAAQ,KAAK1B;AAFR,GAAP;AAID,CAPH;;AASA;;;;AAIA;AACAR,WACGmC,IADH,CACQ,OADR,EAEGC,QAFH,CAEY,UAAS/B,KAAT,EAAgB;AACxB,MAAIN,UAAUsC,OAAV,CAAkB,KAAKvB,QAAvB,MAAqC,CAAC,CAA1C,EAA6C;AAC3C,WAAO,IAAP;AACD;AACD,SAAOT,MAAMiC,MAAb;AACD,CAPH,EAOK,uBAPL;;AASA;AACAtC,WACGmC,IADH,CACQ,UADR,EAEGC,QAFH,CAEY,UAASvB,QAAT,EAAmB;AAC3B,MAAId,UAAUsC,OAAV,CAAkB,KAAKvB,QAAvB,MAAqC,CAAC,CAA1C,EAA6C;AAC3C,WAAO,IAAP;AACD;AACD,SAAOD,SAASyB,MAAhB;AACD,CAPH,EAOK,0BAPL;;AASA;AACAtC,WACGmC,IADH,CACQ,OADR,EAEGC,QAFH,CAEY,UAASG,KAAT,EAAgBC,OAAhB,EAAyB;AACjC,MAAIC,OAAO,IAAX;AACA,SAAO,KAAKC,WAAL,CAAiBC,OAAjB,CAAyB,EAAEtC,OAAOkC,KAAT,EAAzB,EAA2CK,IAA3C,GACJC,IADI,CACC,UAASC,IAAT,EAAe;AACnB,QAAIA,IAAJ,EAAU;AACR,UAAIL,KAAK7B,EAAL,KAAYkC,KAAKlC,EAArB,EAAyB;AACvB,eAAO4B,QAAQ,IAAR,CAAP;AACD;AACD,aAAOA,QAAQ,KAAR,CAAP;AACD;AACD,WAAOA,QAAQ,IAAR,CAAP;AACD,GATI,EAUJO,KAVI,CAUE,UAASC,GAAT,EAAc;AACnB,UAAMA,GAAN;AACD,GAZI,CAAP;AAaD,CAjBH,EAiBK,gDAjBL;AAkBA;AACAhD,WACGmC,IADH,CACQ,QADR,EAEGC,QAFH,CAEY,UAASG,KAAT,EAAgBC,OAAhB,EAAyB;AACjC,MAAIC,OAAO,IAAX;AACA,SAAO,KAAKC,WAAL,CAAiBC,OAAjB,CAAyB,EAAEjB,QAAQa,KAAV,EAAzB,EAA4CK,IAA5C,GACJC,IADI,CACC,UAASC,IAAT,EAAe;AACnB,QAAIA,IAAJ,EAAU;AACR,UAAIL,KAAK7B,EAAL,KAAYkC,KAAKlC,EAArB,EAAyB;AACvB,eAAO4B,QAAQ,IAAR,CAAP;AACD;AACD,aAAOA,QAAQ,KAAR,CAAP;AACD;AACD,WAAOA,QAAQ,IAAR,CAAP;AACD,GATI,EAUJO,KAVI,CAUE,UAASC,GAAT,EAAc;AACnB,UAAMA,GAAN;AACD,GAZI,CAAP;AAaD,CAjBH,EAiBK,iDAjBL;;AAmBA,IAAIC,qBAAqB,SAArBA,kBAAqB,CAASV,KAAT,EAAgB;AACvC,SAAOA,SAASA,MAAMD,MAAtB;AACD,CAFD;;AAIA;;;AAGAtC,WACGkD,GADH,CACO,MADP,EACe,UAASC,IAAT,EAAe;AAAA;;AAC1B;AACA,MAAI,CAAC,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC;AAChC,WAAOD,MAAP;AACD;;AAED,MAAI,CAACF,mBAAmB,KAAKpC,QAAxB,CAAD,IAAsCd,UAAUsC,OAAV,CAAkB,KAAKvB,QAAvB,MAAqC,CAAC,CAAhF,EAAmF;AACjFqC,SAAK,IAAIE,KAAJ,CAAU,kBAAV,CAAL;AACD;;AAED;AACA,OAAKC,QAAL,CAAc,UAACC,OAAD,EAAUxC,IAAV,EAAmB;AAC/B,QAAIwC,OAAJ,EAAa;AACXJ,WAAKI,OAAL;AACD;AACD,UAAKxC,IAAL,GAAYA,IAAZ;AACA,UAAKyC,eAAL,CAAqB,MAAK3C,QAA1B,EAAoC,UAAC4C,UAAD,EAAaC,cAAb,EAAgC;AAClE,UAAID,UAAJ,EAAgB;AACdN,aAAKM,UAAL;AACD;AACD,YAAK5C,QAAL,GAAgB6C,cAAhB;AACAP;AACD,KAND;AAOD,GAZD;AAaD,CAzBH;;AA2BA;;;AAGAnD,WAAW2D,OAAX,GAAqB;AACnB;;;;;;;;AAQAC,cATmB,wBASN/C,QATM,EASIgD,QATJ,EASc;AAAA;;AAC/B,QAAI,CAACA,QAAL,EAAe;AACb,aAAO,KAAKhD,QAAL,KAAkB,KAAK2C,eAAL,CAAqB3C,QAArB,CAAzB;AACD;;AAED,SAAK2C,eAAL,CAAqB3C,QAArB,EAA+B,UAACmC,GAAD,EAAMc,MAAN,EAAiB;AAC9C,UAAId,GAAJ,EAAS;AACP,eAAOa,SAASb,GAAT,CAAP;AACD;;AAED,UAAI,OAAKnC,QAAL,KAAkBiD,MAAtB,EAA8B;AAC5BD,iBAAS,IAAT,EAAe,IAAf;AACD,OAFD,MAEO;AACLA,iBAAS,IAAT,EAAe,KAAf;AACD;AACF,KAVD;AAWD,GAzBkB;;;AA2BnB;;;;;;;;AAQAP,UAnCmB,oBAmCVS,QAnCU,EAmCAF,QAnCA,EAmCU;AAC3B,QAAIG,kBAAkB,EAAtB;;AAEA,QAAI,OAAOC,UAAU,CAAV,CAAP,KAAwB,UAA5B,EAAwC;AACtCJ,iBAAWI,UAAU,CAAV,CAAX;AACAF,iBAAWC,eAAX;AACD,KAHD,MAGO,IAAI,OAAOC,UAAU,CAAV,CAAP,KAAwB,UAA5B,EAAwC;AAC7CJ,iBAAWI,UAAU,CAAV,CAAX;AACD;;AAED,QAAI,CAACF,QAAL,EAAe;AACbA,iBAAWC,eAAX;AACD;;AAED,QAAI,CAACH,QAAL,EAAe;AACb,aAAO,iBAAOK,WAAP,CAAmBH,QAAnB,EAA6BI,QAA7B,CAAsC,QAAtC,CAAP;AACD;;AAED,WAAO,iBAAOD,WAAP,CAAmBH,QAAnB,EAA6B,UAACf,GAAD,EAAMjC,IAAN,EAAe;AACjD,UAAIiC,GAAJ,EAAS;AACPa,iBAASb,GAAT;AACD,OAFD,MAEO;AACLa,iBAAS,IAAT,EAAe9C,KAAKoD,QAAL,CAAc,QAAd,CAAf;AACD;AACF,KANM,CAAP;AAOD,GA5DkB;;;AA8DnB;;;;;;;;AAQAX,iBAtEmB,2BAsEH3C,QAtEG,EAsEOgD,QAtEP,EAsEiB;AAClC,QAAI,CAAChD,QAAD,IAAa,CAAC,KAAKE,IAAvB,EAA6B;AAC3B,aAAO,IAAP;AACD;;AAED,QAAIqD,oBAAoB,KAAxB;AACA,QAAIC,mBAAmB,EAAvB;AACA,QAAItD,OAAO,IAAIuD,MAAJ,CAAW,KAAKvD,IAAhB,EAAsB,QAAtB,CAAX;;AAEA,QAAI,CAAC8C,QAAL,EAAe;AACb,aAAO,iBAAOU,UAAP,CAAkB1D,QAAlB,EAA4BE,IAA5B,EAAkCqD,iBAAlC,EAAqDC,gBAArD,EACOF,QADP,CACgB,QADhB,CAAP;AAED;;AAED,WAAO,iBAAOK,MAAP,CAAc3D,QAAd,EAAwBE,IAAxB,EAA8BqD,iBAA9B,EAAiDC,gBAAjD,EAAmE,UAACrB,GAAD,EAAMyB,GAAN,EAAc;AACtF,UAAIzB,GAAJ,EAAS;AACPa,iBAASb,GAAT;AACD,OAFD,MAEO;AACLa,iBAAS,IAAT,EAAeY,IAAIN,QAAJ,CAAa,QAAb,CAAf;AACD;AACF,KANM,CAAP;AAOD;AA3FkB,CAArB;;kBA8Fe,mBAASO,KAAT,CAAe,MAAf,EAAuB1E,UAAvB,C","file":"user.model.js","sourcesContent":["'use strict';\r\n\r\nimport crypto from 'crypto';\r\nimport mongoose from 'mongoose';\r\nmongoose.Promise = require('bluebird');\r\nimport {Schema} from 'mongoose';\r\n\r\nconst authTypes = ['github', 'twitter', 'facebook', 'google'];\r\n\r\nvar UserSchema = new Schema({\r\n  name: String,\r\n  address: {},\r\n  fname: String,\r\n  email:\r\n  {\r\n    type: String,\r\n    lowercase: true\r\n  },\r\n  role: {\r\n    type: String,\r\n    default: 'user'\r\n  },\r\n  newsletter: String,\r\n  telephone: String,\r\n  id:String,\r\n  password: String,\r\n  provider: String,\r\n  salt: String,\r\n  resetPasswordToken: String,\r\n  resetPasswordExpires: String,\r\n  facebook: {},\r\n  twitter: {},\r\n  google: {},\r\n  github: {},\r\n  contacts: {},\r\n  paid_status: String,\r\n  paid_plan:  String,\r\n  services: {},\r\n  mobile : String,\r\n  company: String,\r\n  created_at    : { type: Date },\r\n  active: { type: Boolean, default: true }\r\n});\r\n\r\n/**\r\n * Virtuals\r\n */\r\n\r\n// Public profile information\r\nUserSchema\r\n  .virtual('profile')\r\n  .get(function() {\r\n    return {\r\n      'name': this.name,\r\n      'role': this.role,\r\n      'id':this.id,\r\n      'fname':this.fname,\r\n      'mobile':this.mobile,\r\n      'email':this.email\r\n    };\r\n  });\r\n\r\n// Non-sensitive info we'll be putting in the token\r\nUserSchema\r\n  .virtual('token')\r\n  .get(function() {\r\n    return {\r\n      '_id': this._id,\r\n      'role': this.role\r\n    };\r\n  });\r\n\r\n/**\r\n * Validations\r\n */\r\n\r\n// Validate empty email\r\nUserSchema\r\n  .path('email')\r\n  .validate(function(email) {\r\n    if (authTypes.indexOf(this.provider) !== -1) {\r\n      return true;\r\n    }\r\n    return email.length;\r\n  }, 'Email cannot be blank');\r\n\r\n// Validate empty password\r\nUserSchema\r\n  .path('password')\r\n  .validate(function(password) {\r\n    if (authTypes.indexOf(this.provider) !== -1) {\r\n      return true;\r\n    }\r\n    return password.length;\r\n  }, 'Password cannot be blank');\r\n\r\n// Validate email is not taken\r\nUserSchema\r\n  .path('email')\r\n  .validate(function(value, respond) {\r\n    var self = this;\r\n    return this.constructor.findOne({ email: value }).exec()\r\n      .then(function(user) {\r\n        if (user) {\r\n          if (self.id === user.id) {\r\n            return respond(true);\r\n          }\r\n          return respond(false);\r\n        }\r\n        return respond(true);\r\n      })\r\n      .catch(function(err) {\r\n        throw err;\r\n      });\r\n  }, 'The specified email address is already in use.');\r\n// Validate mobile is not taken\r\nUserSchema\r\n  .path('mobile')\r\n  .validate(function(value, respond) {\r\n    var self = this;\r\n    return this.constructor.findOne({ mobile: value }).exec()\r\n      .then(function(user) {\r\n        if (user) {\r\n          if (self.id === user.id) {\r\n            return respond(true);\r\n          }\r\n          return respond(false);\r\n        }\r\n        return respond(true);\r\n      })\r\n      .catch(function(err) {\r\n        throw err;\r\n      });\r\n  }, 'The specified mobile address is already in use.');\r\n\r\nvar validatePresenceOf = function(value) {\r\n  return value && value.length;\r\n};\r\n\r\n/**\r\n * Pre-save hook\r\n */\r\nUserSchema\r\n  .pre('save', function(next) {\r\n    // Handle new/update passwords\r\n    if (!this.isModified('password')) {\r\n      return next();\r\n    }\r\n\r\n    if (!validatePresenceOf(this.password) && authTypes.indexOf(this.provider) === -1) {\r\n      next(new Error('Invalid password'));\r\n    }\r\n\r\n    // Make salt with a callback\r\n    this.makeSalt((saltErr, salt) => {\r\n      if (saltErr) {\r\n        next(saltErr);\r\n      }\r\n      this.salt = salt;\r\n      this.encryptPassword(this.password, (encryptErr, hashedPassword) => {\r\n        if (encryptErr) {\r\n          next(encryptErr);\r\n        }\r\n        this.password = hashedPassword;\r\n        next();\r\n      });\r\n    });\r\n  });\r\n\r\n/**\r\n * Methods\r\n */\r\nUserSchema.methods = {\r\n  /**\r\n   * Authenticate - check if the passwords are the same\r\n   *\r\n   * @param {String} password\r\n   * @param {Function} callback\r\n   * @return {Boolean}\r\n   * @api public\r\n   */\r\n  authenticate(password, callback) {\r\n    if (!callback) {\r\n      return this.password === this.encryptPassword(password);\r\n    }\r\n\r\n    this.encryptPassword(password, (err, pwdGen) => {\r\n      if (err) {\r\n        return callback(err);\r\n      }\r\n\r\n      if (this.password === pwdGen) {\r\n        callback(null, true);\r\n      } else {\r\n        callback(null, false);\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Make salt\r\n   *\r\n   * @param {Number} byteSize Optional salt byte size, default to 16\r\n   * @param {Function} callback\r\n   * @return {String}\r\n   * @api public\r\n   */\r\n  makeSalt(byteSize, callback) {\r\n    var defaultByteSize = 16;\r\n\r\n    if (typeof arguments[0] === 'function') {\r\n      callback = arguments[0];\r\n      byteSize = defaultByteSize;\r\n    } else if (typeof arguments[1] === 'function') {\r\n      callback = arguments[1];\r\n    }\r\n\r\n    if (!byteSize) {\r\n      byteSize = defaultByteSize;\r\n    }\r\n\r\n    if (!callback) {\r\n      return crypto.randomBytes(byteSize).toString('base64');\r\n    }\r\n\r\n    return crypto.randomBytes(byteSize, (err, salt) => {\r\n      if (err) {\r\n        callback(err);\r\n      } else {\r\n        callback(null, salt.toString('base64'));\r\n      }\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Encrypt password\r\n   *\r\n   * @param {String} password\r\n   * @param {Function} callback\r\n   * @return {String}\r\n   * @api public\r\n   */\r\n  encryptPassword(password, callback) {\r\n    if (!password || !this.salt) {\r\n      return null;\r\n    }\r\n\r\n    var defaultIterations = 10000;\r\n    var defaultKeyLength = 64;\r\n    var salt = new Buffer(this.salt, 'base64');\r\n\r\n    if (!callback) {\r\n      return crypto.pbkdf2Sync(password, salt, defaultIterations, defaultKeyLength)\r\n                   .toString('base64');\r\n    }\r\n\r\n    return crypto.pbkdf2(password, salt, defaultIterations, defaultKeyLength, (err, key) => {\r\n      if (err) {\r\n        callback(err);\r\n      } else {\r\n        callback(null, key.toString('base64'));\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport default mongoose.model('User', UserSchema);\r\n"]}