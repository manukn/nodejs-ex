{"version":3,"sources":["api/customer/customer.model.js"],"names":["mongoose","require","promisifyAll","CustomerSchema","Schema","name","String","fname","email","type","lowercase","address","newsletter","tel","mobile","active","Boolean","updatedAt","createdAt","modifiedBy","path","validate","value","respond","self","constructor","findOne","exec","then","user","id","catch","err","model"],"mappings":"AAAA;;;;;AAEA,IAAIA,WAAWC,QAAQ,UAAR,EAAoBC,YAApB,CAAiCD,QAAQ,UAAR,CAAjC,CAAf;;AAEA,IAAIE,iBAAiB,IAAIH,SAASI,MAAb,CAAoB;AACvCC,QAAMC,MADiC;AAEvCC,SAAOD,MAFgC;AAGvCE,SACA;AACEC,UAAMH,MADR;AAEEI,eAAW;AAFb,GAJuC;AAQvCC,WAASL,MAR8B;AASvCM,cAAYN,MAT2B;AAUvCO,OAAKP,MAVkC;AAWvCQ,UAAQR,MAX+B;AAYvCS,UAAQC,OAZ+B;AAavCC,aAAWX,MAb4B;AAcvCY,aAAWZ,MAd4B;AAevCa,cAAYb;AAf2B,CAApB,CAArB;AAiBA;AACAH,eACGiB,IADH,CACQ,OADR,EAEGC,QAFH,CAEY,UAASC,KAAT,EAAgBC,OAAhB,EAAyB;AACjC,MAAIC,OAAO,IAAX;AACA,SAAO,KAAKC,WAAL,CAAiBC,OAAjB,CAAyB,EAAElB,OAAOc,KAAT,EAAzB,EAA2CK,IAA3C,GACJC,IADI,CACC,UAASC,IAAT,EAAe;AACnB,QAAIA,IAAJ,EAAU;AACR,UAAIL,KAAKM,EAAL,KAAYD,KAAKC,EAArB,EAAyB;AACvB,eAAOP,QAAQ,IAAR,CAAP;AACD;AACD,aAAOA,QAAQ,KAAR,CAAP;AACD;AACD,WAAOA,QAAQ,IAAR,CAAP;AACD,GATI,EAUJQ,KAVI,CAUE,UAASC,GAAT,EAAc;AACnB,UAAMA,GAAN;AACD,GAZI,CAAP;AAaD,CAjBH,EAiBK,gDAjBL;kBAkBehC,SAASiC,KAAT,CAAe,UAAf,EAA2B9B,cAA3B,C","file":"customer.model.js","sourcesContent":["'use strict';\r\n\r\nvar mongoose = require('bluebird').promisifyAll(require('mongoose'));\r\n\r\nvar CustomerSchema = new mongoose.Schema({\r\n  name: String,\r\n  fname: String,\r\n  email:\r\n  {\r\n    type: String,\r\n    lowercase: true\r\n  },\r\n  address: String,\r\n  newsletter: String,\r\n  tel: String,\r\n  mobile: String,\r\n  active: Boolean,\r\n  updatedAt: String,\r\n  createdAt: String,\r\n  modifiedBy: String\r\n});\r\n// Validate email is not taken\r\nCustomerSchema\r\n  .path('email')\r\n  .validate(function(value, respond) {\r\n    var self = this;\r\n    return this.constructor.findOne({ email: value }).exec()\r\n      .then(function(user) {\r\n        if (user) {\r\n          if (self.id === user.id) {\r\n            return respond(true);\r\n          }\r\n          return respond(false);\r\n        }\r\n        return respond(true);\r\n      })\r\n      .catch(function(err) {\r\n        throw err;\r\n      });\r\n  }, 'The specified email address is already in use.');\r\nexport default mongoose.model('Customer', CustomerSchema);\r\n"]}