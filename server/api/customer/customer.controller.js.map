{"version":3,"sources":["api/customer/customer.controller.js"],"names":["index","show","create","update","destroy","respondWithResult","res","statusCode","entity","status","json","saveUpdates","updates","updated","merge","saveAsync","spread","removeEntity","removeAsync","then","end","handleEntityNotFound","handleError","err","send","req","findAsync","catch","findByIdAsync","params","id","createAsync","body","_id"],"mappings":"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","file":"customer.controller.js","sourcesContent":["/**\r\n * Using Rails-like standard naming convention for endpoints.\r\n * GET     /api/customers              ->  index\r\n * POST    /api/customers              ->  create\r\n * GET     /api/customers/:id          ->  show\r\n * PUT     /api/customers/:id          ->  update\r\n * DELETE  /api/customers/:id          ->  destroy\r\n */\r\n\r\n'use strict';\r\n\r\nimport _ from 'lodash';\r\nimport Customer from './customer.model';\r\n\r\nfunction respondWithResult(res, statusCode) {\r\n  statusCode = statusCode || 200;\r\n  return function(entity) {\r\n    if (entity) {\r\n      res.status(statusCode).json(entity);\r\n    }\r\n  };\r\n}\r\n\r\nfunction saveUpdates(updates) {\r\n  return function(entity) {\r\n    var updated = _.merge(entity, updates);\r\n    return updated.saveAsync()\r\n      .spread(updated => {\r\n        return updated;\r\n      });\r\n  };\r\n}\r\n\r\nfunction removeEntity(res) {\r\n  return function(entity) {\r\n    if (entity) {\r\n      return entity.removeAsync()\r\n        .then(() => {\r\n          res.status(204).end();\r\n        });\r\n    }\r\n  };\r\n}\r\n\r\nfunction handleEntityNotFound(res) {\r\n  return function(entity) {\r\n    if (!entity) {\r\n      res.status(404).end();\r\n      return null;\r\n    }\r\n    return entity;\r\n  };\r\n}\r\n\r\nfunction handleError(res, statusCode) {\r\n  statusCode = statusCode || 500;\r\n  return function(err) {\r\n    res.status(statusCode).send(err);\r\n  };\r\n}\r\n\r\n// Gets a list of Customers\r\nexport function index(req, res) {\r\n  Customer.findAsync()\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Gets a single Customer from the DB\r\nexport function show(req, res) {\r\n  Customer.findByIdAsync(req.params.id)\r\n    .then(handleEntityNotFound(res))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Creates a new Customer in the DB\r\nexport function create(req, res) {\r\n  Customer.createAsync(req.body)\r\n    .then(respondWithResult(res, 201))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Updates an existing Customer in the DB\r\nexport function update(req, res) {\r\n  if (req.body._id) {\r\n    delete req.body._id;\r\n  }\r\n  Customer.findByIdAsync(req.params.id)\r\n    .then(handleEntityNotFound(res))\r\n    .then(saveUpdates(req.body))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Deletes a Customer from the DB\r\nexport function destroy(req, res) {\r\n  Customer.findByIdAsync(req.params.id)\r\n    .then(handleEntityNotFound(res))\r\n    .then(removeEntity(res))\r\n    .catch(handleError(res));\r\n}\r\n"]}