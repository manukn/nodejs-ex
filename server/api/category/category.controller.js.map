{"version":3,"sources":["api/category/category.controller.js"],"names":["index","single","brand","services","show","create","update","destroy","respondWithResult","res","statusCode","entity","status","json","saveUpdates","updates","updated","merge","saveAsync","spread","removeEntity","removeAsync","then","end","handleEntityNotFound","handleError","err","send","req","findAsync","catch","findOne","name","body","slug","game","find","findByIdAsync","params","id","createAsync","_id","$set","multi","cart"],"mappings":"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","file":"category.controller.js","sourcesContent":["/**\r\n * Using Rails-like standard naming convention for endpoints.\r\n * GET     /api/categorys              ->  index\r\n * POST    /api/categorys              ->  create\r\n * GET     /api/categorys/:id          ->  show\r\n * PUT     /api/categorys/:id          ->  update\r\n * DELETE  /api/categorys/:id          ->  destroy\r\n */\r\n\r\n'use strict';\r\n\r\nimport _ from 'lodash';\r\nimport Category from './category.model';\r\n\r\nfunction respondWithResult(res, statusCode) {\r\n  statusCode = statusCode || 200;\r\n  return function(entity) {\r\n    if (entity) {\r\n      res.status(statusCode).json(entity);\r\n    }\r\n  };\r\n}\r\n\r\nfunction saveUpdates(updates) {\r\n  return function(entity) {\r\n    var updated = _.merge(entity, updates);\r\n    return updated.saveAsync()\r\n      .spread(updated => {\r\n        return updated;\r\n      });\r\n  };\r\n}\r\n\r\nfunction removeEntity(res) {\r\n  return function(entity) {\r\n    if (entity) {\r\n      return entity.removeAsync()\r\n        .then(() => {\r\n          res.status(204).end();\r\n        });\r\n    }\r\n  };\r\n}\r\n\r\nfunction handleEntityNotFound(res) {\r\n  return function(entity) {\r\n    if (!entity) {\r\n      res.status(404).end();\r\n      return null;\r\n    }\r\n    return entity;\r\n  };\r\n}\r\n\r\nfunction handleError(res, statusCode) {\r\n  statusCode = statusCode || 500;\r\n  return function(err) {\r\n    res.status(statusCode).send(err);\r\n  };\r\n}\r\n\r\n// Gets a list of Categorys\r\nexport function index(req, res) {\r\n  Category.findAsync()\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\nexport function single(req, res) {\r\n  Category.findOne({name:req.body.slug,game:req.body.brand})\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\nexport function brand(req, res) {\r\n  Category.find({game:req.body.brand})\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n// Gets a specific  Category from the DB\r\nexport function services(req, res) {\r\n  Category.findByIdAsync(req.params.id)\r\n    .then(handleEntityNotFound(res))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n// Gets a single Category from the DB\r\nexport function show(req, res) {\r\n  Category.findByIdAsync(req.params.id)\r\n    .then(handleEntityNotFound(res))\r\n    .then(respondWithResult(res))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Creates a new Category in the DB\r\nexport function create(req, res) {\r\n  Category.createAsync(req.body)\r\n    .then(respondWithResult(res, 201))\r\n    .catch(handleError(res));\r\n}\r\n\r\n// Updates an existing Category in the DB\r\nexport function update(req, res) {\r\n  Category.update(\r\n    {_id:req.params.id},\r\n    {$set:req.body},\r\n    {multi:true}\r\n    ,function (err, cart) {\r\n    if (err) { return handleError(res, err); }\r\n    else {\r\n      return res.status(200).json(cart);\r\n    }\r\n  });\r\n}\r\n\r\n// Deletes a Category from the DB\r\nexport function destroy(req, res) {\r\n  Category.findByIdAsync(req.params.id)\r\n    .then(handleEntityNotFound(res))\r\n    .then(removeEntity(res))\r\n    .catch(handleError(res));\r\n}\r\n"]}